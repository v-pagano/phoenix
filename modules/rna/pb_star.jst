{% from 'utilities/read_group_line.jst' import read_group_line %}
{% from 'utilities/remove_files.jst' import remove_files with context %}

# Run STAR RNA Alignment for quantification
{% macro pb_star(sample, opt_dup_distance) %}
{% set star_index_size %}{{ sample.read1Length|default(100, true) }}bpReads{% endset %}
{% set sjdb_overhang %}{{ sample.read1Length - 1|default(99, true) }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/star/{{ sample.name }}{% endset %}
{% set star_finalcountsdir %}{{ sample.gltype }}/quant/star/{{ sample.name }}{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/quant/star/{{ sample.name }}{% endset %}
{% set star_bam_unsort %}{{ temp_dir }}/{{ sample.name }}.Aligned.out.bam{% endset %}
{% set star_bam_transcript %}{{ temp_dir }}/{{ sample.name }}.Aligned.toTranscriptome.out.bam{% endset %}
{% set star_bam_sorted %}{{ temp_dir }}/{{ sample.name }}.Aligned.sorted.bam{% endset %}
{% set star_bam_md %}{{ temp_dir }}/{{ sample.name }}.md.bam{% endset %}
{% set star_bam_final %}{{ results_dir }}/{{ sample.name }}.star.bam{% endset %}

{# Here we build up lists of all the fastq files and rg lines for this sample #}
{% set r1fqlist = [] %}
{% set r2fqlist = [] %}
{% set rglinelist = [] %}

{% for rgid, rg in sample.read_groups.items() %}
  {% if rg.data_files|length < 2 %}
      {{ raise('Read group did not have 2 data files: {}'.format(rgid)) }}
  {% endif %}
  {% do rglinelist.append(read_group_line(rg, format='star')) %}

  {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
  {% do r1fastq.update({"path": "temp/fastqs/" + r1fastq.basename}) %}
  {% do r1fqlist.append(r1fastq) %}

  {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
  {% do r2fastq.update({"path": "temp/fastqs/" + r2fastq.basename}) %}
  {% do r2fqlist.append(r2fastq) %}
{% endfor %}

- name: pb_star_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, rna_alignment, STAR, {{ sample.name }}]
  methods: >
    Transcript quantification for {{ sample.name }} was performed with
    {{ constants.tools.star.verbose }} followed by TODO...
  reset: predecessors
  input:
    {% for fq in r1fqlist %}
    - {{ fq.path }}
    {% endfor %}
    {% for fq in r2fqlist %}
    - {{ fq.path }}
    {% endfor %}
  output: {{ star_bam_unsort }}
  walltime: "48:00:00"
  sbatch_args: ['-p', 'gpu', '--exclusive']
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.parabricks.module }}

    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ results_dir }}"
    mkdir -p "{{ star_finalcountsdir }}"

    pbrun rna_fq2bam \
      {% if petaGene %}
        --with-petagene-dir /packages/petagene-1.3.0p3-1/petasuite --bwa-options "-K 100000000 -Y" \
      {% endif %}
      {% for i in range(r1fqlist | length) %}
        --in-fq {{ r1fqlist[i].path }} {{  r2fqlist[i].path }} \
      {% endfor %}
      --sjdb-overhang {{ sjdb_overhang }} \
      --ref {{ constants.phoenix.star_fasta }} \
      --genome-lib-dir /scratch/vpagano/genomes/83bp \
      --read-files-command zcat \
      --tmp-dir {{ temp_dir }} \
      --out-bam {{ star_bam_final }} \
      --output-dir {{ results_dir }}

    {% if  tasks.RNA_transcriptome_quantify_expression_HTseq %}
      {% set directory %}{{ temp_dir }}{% endset %}
      {{- htseq(sample) }}
    {% endif %}
    {% if tasks.RNA_transcriptome_quantify_expression_subread_featureCounts %}
      {% set directory %}{{ temp_dir }}{% endset %}
      {{- featurecounts(sample) }}
    {% endif %}
{% endmacro %}

{% macro htseq(sample) %}
{% set temp_dir %}temp/{{ sample.gltype }}/quant/star/{{ sample.name }}{% endset %}
{% set star_bam_unsort %}{{ temp_dir }}/{{ sample.name }}.Aligned.out.bam{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/star/{{ sample.name }}{% endset %}
{% set star_bam_final %}{{ results_dir }}/{{ sample.name }}.star.bam{% endset %}

- name: htseq_{{ sample.name }}
  tags: [{{ sample.gltype }}, transcriptome, quantify_expression, HTseq, {{ sample.name }}]
  reset: predecessors
  input: {{ star_bam_unsort }}
  output: {{ sample.gltype }}/quant/htseq/{{ sample.name }}/{{ sample.name }}.htseq_counts.txt
  cpus: 2
  mem: 4G
  walltime: "48:00:00"
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.htseq.module }}
    
    mkdir -p "{{ sample.gltype }}/quant/htseq/{{ sample.name }}/"

    {#
    # Notes about command options:
    # --nprocesses ; default=1 ; number of threads based on number of input files
    # -r --order=pos ; default=name ; GDC=name (bam unsorted)
    # -s --stranded=<yes/no/reverse> ; default=yes ; GDC=no (Dumb)
    # -a --a=<minaqual> ; default=10 ; skip all reads with alignment quality lower than the given minimum value
    # --additional-attr=gene_name ; default=none ; will be printed as an additional column after the primary 
    #   attribute column but before the counts column(s)
    # --mode=<union/intersection-strict/intersection-nonempty> ; default=union ; Pegasus=union, GDC=intersection-nonempty
    # --nonunique=<none/all> ; default=none ; Mode to handle reads that align to or are assigned to more than 
    #   one feature in the overlap
    # --secondary-alignments=<score/ignore> ; default=score
    # --supplementary-alignments=<score/ignore> ; default=score
    #}
    htseq-count \
      --nprocesses 2 \
      --quiet \
      --format=bam \
      --order=name \
      --minaqual=10 \
      --type=exon \
      --idattr=gene_id \
      --additional-attr=gene_name \
      --mode=union \
      --nonunique=none \
      --stranded={{ constants.phoenix.strandedness_options[sample.strandedness].htseq }} \
      "{{ star_bam_final }}" \
      "{{ constants.phoenix.gtf }}" \
      > "{{ sample.gltype }}/quant/htseq/{{ sample.name }}/{{ sample.name }}.htseq_counts.txt"
{% endmacro %}

{% macro featurecounts(sample) %}
{% set temp_dir %}temp/{{ sample.gltype }}/quant/star/{{ sample.name }}{% endset %}
{% set star_bam_unsort %}{{ temp_dir }}/{{ sample.name }}.Aligned.out.bam{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/star/{{ sample.name }}{% endset %}
{% set star_bam_final %}{{ results_dir }}/{{ sample.name }}.star.bam{% endset %}

- name: featurecounts_{{ sample.name }}
  tags: [{{ sample.gltype }}, transcriptome, quantify_expression, subread_featureCounts, {{ sample.name }}]
  reset: predecessors
  input: {{ star_bam_final }}
  output: 
    - {{ sample.gltype }}/quant/featurecounts/{{ sample.name }}/{{ sample.name }}.exon.counts.tsv
    - {{ sample.gltype }}/quant/featurecounts/{{ sample.name }}/{{ sample.name }}.gene.counts.tsv
  cpus: 8
  mem: 8G
  walltime: "8:00:00"
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.subread.module }}
    
    mkdir -p "{{ sample.gltype }}/quant/featurecounts/{{ sample.name }}/"

    featureCounts \
      -T 7 \
      -p \
      -t "gene" \
      -s "{{ constants.phoenix.strandedness_options[sample.strandedness].featurecounts }}" \
      -a "{{ constants.phoenix.gtf }}" \
      -o "{{ sample.gltype }}/quant/featurecounts/{{ sample.name }}/{{ sample.name }}.gene.counts.tsv" \
      "{{ star_bam_final }}"
{% endmacro %}

