{% from 'modules/annotation/main.jst' import annotate_vcfs with context %}

{%- macro pb_deepvariant(sample, aligner='bwa', taskPrefix='Genome') %}

{%- set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.vcf{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.pass.vcf.gz{% endset %}

- name: pb_deepvariant_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  reset: predecessors
  input: {{ bam }}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.g.vcf.gz
  mem: 4G
  walltime: "24:00:00"
  sbatch_args: ['-p', 'gpu', '--nodelist=dback-gpu01', '-c', '40']
  cmd: |
    set -eu
    set -o pipefail

    module load parabricks/3.1.6

    PROJECT_ROOT=$PWD
    mkdir -p "{{ results_dir }}"

    pbrun deepvariant --ref "{{ constants.phoenix.reference_fasta }}" \
    --in-bam "${PROJECT_ROOT}/{{ bam }}" \
    --out-variants "${PROJECT_ROOT}/{{ all_vcf }}"

- name: deepvariant_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  reset: predecessors
  input: {{ all_vcf }}
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

{{- annotate_vcfs(sample, temp_dir, results_dir, pass_vcf, taskPrefix, aligner, 'deepvariant', 'constitutional', 'snp_indel_caller') }}
{% endmacro %}
