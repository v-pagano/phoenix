# Aligns fastqs from a sample using Parabricks fq2BAM. This aligns all samples
# in on large run. No need to split or merge. It will also run 
# mark duplicatese and BQSR

# This alignment command prefix is shared by all modules using bwa
{% from 'utilities/read_group_line.jst' import read_group_line with context %}
{% from 'utilities/remove_files.jst' import remove_files with context %}

{% macro fq2bam(sample) %}
  {% set bam %}{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}.bwa.bam{% endset %}
- name: fq2bam_{{sample.name}}
  reset: predecessors
  input:
  {% for rgid, rg in sample.read_groups.items() %}
    {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
    {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
    - temp/fastqs/{{ r1fastq.basename }}
    - temp/fastqs/{{ r2fastq.basename }}
  {% endfor %}
  output: {{ bam }}
  walltime: "10:00:00"
  sbatch_args: ['-p', 'gpu', '--nodelist=dback-gpu01', '-c', '40']
  cmd: |
    rm -r "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}" || true
    mkdir -p "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}"
    mkdir -p "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}"

  {% for rgid, rg in sample.read_groups.items() %}
    {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
    {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
    echo "{{ r1fastq.basename }}"
    echo "{{ r2fastq.basename }}"
  {% endfor %}
    module load parabricks/3.1.1
    pbrun fq2bam \
    --ref "{{ constants.phoenix.reference_fasta }}" \
    --bwa-options "-Y -K 100000000" \
  {% for rgid, rg in sample.read_groups.items() %}
    {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
    {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
    --in-fq "temp/fastqs/{{ r1fastq.basename }}" "temp/fastqs/{{ r2fastq.basename }}" \
  {% endfor %}
    --out-bam "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}.bwa.bam" \
  {% if sample.gltype | lower == 'genome' %}
  {% if tasks.Genome_alignment_base_recalibration_gatk is defined and tasks.Genome_alignment_base_recalibration_gatk %}
    {% for vcf in constants.phoenix.gatk_known_sites %}
      --knownSites "{{ vcf }}" \
    {% endfor %}
      --out-recal-file "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}.recal_data.table"
  {% endif %}
  {% endif %}
  {% if sample.gltype | lower == 'exome' %}
  {% if tasks.Exome_alignment_base_recalibration_gatk is defined and tasks.Exome_alignment_base_recalibration_gatk %}
    {% for vcf in constants.phoenix.gatk_known_sites %}
      --knownSites "{{ vcf }}" \
    {% endfor %}
      --out-recal-file "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}.recal_data.table"
  {% endif %}
  {% endif %}
  {% if sample.gltype | lower == 'genome' %}
  {% if tasks.Genome_alignment_base_recalibration_gatk is defined and tasks.Genome_alignment_base_recalibration_gatk %}
    {% for vcf in constants.phoenix.gatk_known_sites %}
      --knownSites "{{ vcf }}" \
    {% endfor %}
      --out-recal-file "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}.recal_data.table"
  {% endif %}
  {% endif %}
{% endmacro %}

